#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AsHedonistas.Models.DBDiagram
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AsHedonistas")]
	public partial class AsHedonistasDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insert__MigrationHistory(__MigrationHistory instance);
    partial void Update__MigrationHistory(__MigrationHistory instance);
    partial void Delete__MigrationHistory(__MigrationHistory instance);
    partial void InsertNoticeCategories(NoticeCategories instance);
    partial void UpdateNoticeCategories(NoticeCategories instance);
    partial void DeleteNoticeCategories(NoticeCategories instance);
    partial void InsertNoticeCategoryNotices(NoticeCategoryNotices instance);
    partial void UpdateNoticeCategoryNotices(NoticeCategoryNotices instance);
    partial void DeleteNoticeCategoryNotices(NoticeCategoryNotices instance);
    partial void InsertNoticeComments(NoticeComments instance);
    partial void UpdateNoticeComments(NoticeComments instance);
    partial void DeleteNoticeComments(NoticeComments instance);
    partial void InsertNoticeDetails(NoticeDetails instance);
    partial void UpdateNoticeDetails(NoticeDetails instance);
    partial void DeleteNoticeDetails(NoticeDetails instance);
    partial void InsertNotices(Notices instance);
    partial void UpdateNotices(Notices instance);
    partial void DeleteNotices(Notices instance);
    partial void InsertOrders(Orders instance);
    partial void UpdateOrders(Orders instance);
    partial void DeleteOrders(Orders instance);
    partial void InsertProductCategories(ProductCategories instance);
    partial void UpdateProductCategories(ProductCategories instance);
    partial void DeleteProductCategories(ProductCategories instance);
    partial void InsertProductCategoryProducts(ProductCategoryProducts instance);
    partial void UpdateProductCategoryProducts(ProductCategoryProducts instance);
    partial void DeleteProductCategoryProducts(ProductCategoryProducts instance);
    partial void InsertProducts(Products instance);
    partial void UpdateProducts(Products instance);
    partial void DeleteProducts(Products instance);
    partial void InsertRoles(Roles instance);
    partial void UpdateRoles(Roles instance);
    partial void DeleteRoles(Roles instance);
    partial void InsertRoleUsers(RoleUsers instance);
    partial void UpdateRoleUsers(RoleUsers instance);
    partial void DeleteRoleUsers(RoleUsers instance);
    partial void InsertShipments(Shipments instance);
    partial void UpdateShipments(Shipments instance);
    partial void DeleteShipments(Shipments instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public AsHedonistasDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AsHedonistasConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AsHedonistasDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AsHedonistasDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AsHedonistasDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AsHedonistasDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<@__MigrationHistory> @__MigrationHistory
		{
			get
			{
				return this.GetTable<@__MigrationHistory>();
			}
		}
		
		public System.Data.Linq.Table<NoticeCategories> NoticeCategories
		{
			get
			{
				return this.GetTable<NoticeCategories>();
			}
		}
		
		public System.Data.Linq.Table<NoticeCategoryNotices> NoticeCategoryNotices
		{
			get
			{
				return this.GetTable<NoticeCategoryNotices>();
			}
		}
		
		public System.Data.Linq.Table<NoticeComments> NoticeComments
		{
			get
			{
				return this.GetTable<NoticeComments>();
			}
		}
		
		public System.Data.Linq.Table<NoticeDetails> NoticeDetails
		{
			get
			{
				return this.GetTable<NoticeDetails>();
			}
		}
		
		public System.Data.Linq.Table<Notices> Notices
		{
			get
			{
				return this.GetTable<Notices>();
			}
		}
		
		public System.Data.Linq.Table<Orders> Orders
		{
			get
			{
				return this.GetTable<Orders>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategories> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategories>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategoryProducts> ProductCategoryProducts
		{
			get
			{
				return this.GetTable<ProductCategoryProducts>();
			}
		}
		
		public System.Data.Linq.Table<Products> Products
		{
			get
			{
				return this.GetTable<Products>();
			}
		}
		
		public System.Data.Linq.Table<Roles> Roles
		{
			get
			{
				return this.GetTable<Roles>();
			}
		}
		
		public System.Data.Linq.Table<RoleUsers> RoleUsers
		{
			get
			{
				return this.GetTable<RoleUsers>();
			}
		}
		
		public System.Data.Linq.Table<Shipments> Shipments
		{
			get
			{
				return this.GetTable<Shipments>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[__MigrationHistory]")]
	public partial class @__MigrationHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MigrationId;
		
		private string _ContextKey;
		
		private System.Data.Linq.Binary _Model;
		
		private string _ProductVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMigrationIdChanging(string value);
    partial void OnMigrationIdChanged();
    partial void OnContextKeyChanging(string value);
    partial void OnContextKeyChanged();
    partial void OnModelChanging(System.Data.Linq.Binary value);
    partial void OnModelChanged();
    partial void OnProductVersionChanging(string value);
    partial void OnProductVersionChanged();
    #endregion
		
		public @__MigrationHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MigrationId", DbType="NVarChar(150) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MigrationId
		{
			get
			{
				return this._MigrationId;
			}
			set
			{
				if ((this._MigrationId != value))
				{
					this.OnMigrationIdChanging(value);
					this.SendPropertyChanging();
					this._MigrationId = value;
					this.SendPropertyChanged("MigrationId");
					this.OnMigrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextKey", DbType="NVarChar(300) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ContextKey
		{
			get
			{
				return this._ContextKey;
			}
			set
			{
				if ((this._ContextKey != value))
				{
					this.OnContextKeyChanging(value);
					this.SendPropertyChanging();
					this._ContextKey = value;
					this.SendPropertyChanged("ContextKey");
					this.OnContextKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductVersion", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string ProductVersion
		{
			get
			{
				return this._ProductVersion;
			}
			set
			{
				if ((this._ProductVersion != value))
				{
					this.OnProductVersionChanging(value);
					this.SendPropertyChanging();
					this._ProductVersion = value;
					this.SendPropertyChanged("ProductVersion");
					this.OnProductVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeCategories")]
	public partial class NoticeCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoticeCategoryID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<NoticeCategoryNotices> _NoticeCategoryNotices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoticeCategoryIDChanging(int value);
    partial void OnNoticeCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public NoticeCategories()
		{
			this._NoticeCategoryNotices = new EntitySet<NoticeCategoryNotices>(new Action<NoticeCategoryNotices>(this.attach_NoticeCategoryNotices), new Action<NoticeCategoryNotices>(this.detach_NoticeCategoryNotices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoticeCategoryID
		{
			get
			{
				return this._NoticeCategoryID;
			}
			set
			{
				if ((this._NoticeCategoryID != value))
				{
					this.OnNoticeCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeCategoryID = value;
					this.SendPropertyChanged("NoticeCategoryID");
					this.OnNoticeCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NoticeCategories_NoticeCategoryNotices", Storage="_NoticeCategoryNotices", ThisKey="NoticeCategoryID", OtherKey="NoticeCategory_NoticeCategoryID")]
		public EntitySet<NoticeCategoryNotices> NoticeCategoryNotices
		{
			get
			{
				return this._NoticeCategoryNotices;
			}
			set
			{
				this._NoticeCategoryNotices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NoticeCategoryNotices(NoticeCategoryNotices entity)
		{
			this.SendPropertyChanging();
			entity.NoticeCategories = this;
		}
		
		private void detach_NoticeCategoryNotices(NoticeCategoryNotices entity)
		{
			this.SendPropertyChanging();
			entity.NoticeCategories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeCategoryNotices")]
	public partial class NoticeCategoryNotices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoticeCategory_NoticeCategoryID;
		
		private int _Notice_NoticeID;
		
		private EntityRef<NoticeCategories> _NoticeCategories;
		
		private EntityRef<Notices> _Notices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoticeCategory_NoticeCategoryIDChanging(int value);
    partial void OnNoticeCategory_NoticeCategoryIDChanged();
    partial void OnNotice_NoticeIDChanging(int value);
    partial void OnNotice_NoticeIDChanged();
    #endregion
		
		public NoticeCategoryNotices()
		{
			this._NoticeCategories = default(EntityRef<NoticeCategories>);
			this._Notices = default(EntityRef<Notices>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeCategory_NoticeCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NoticeCategory_NoticeCategoryID
		{
			get
			{
				return this._NoticeCategory_NoticeCategoryID;
			}
			set
			{
				if ((this._NoticeCategory_NoticeCategoryID != value))
				{
					if (this._NoticeCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoticeCategory_NoticeCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeCategory_NoticeCategoryID = value;
					this.SendPropertyChanged("NoticeCategory_NoticeCategoryID");
					this.OnNoticeCategory_NoticeCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notice_NoticeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Notice_NoticeID
		{
			get
			{
				return this._Notice_NoticeID;
			}
			set
			{
				if ((this._Notice_NoticeID != value))
				{
					if (this._Notices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotice_NoticeIDChanging(value);
					this.SendPropertyChanging();
					this._Notice_NoticeID = value;
					this.SendPropertyChanged("Notice_NoticeID");
					this.OnNotice_NoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NoticeCategories_NoticeCategoryNotices", Storage="_NoticeCategories", ThisKey="NoticeCategory_NoticeCategoryID", OtherKey="NoticeCategoryID", IsForeignKey=true)]
		public NoticeCategories NoticeCategories
		{
			get
			{
				return this._NoticeCategories.Entity;
			}
			set
			{
				NoticeCategories previousValue = this._NoticeCategories.Entity;
				if (((previousValue != value) 
							|| (this._NoticeCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NoticeCategories.Entity = null;
						previousValue.NoticeCategoryNotices.Remove(this);
					}
					this._NoticeCategories.Entity = value;
					if ((value != null))
					{
						value.NoticeCategoryNotices.Add(this);
						this._NoticeCategory_NoticeCategoryID = value.NoticeCategoryID;
					}
					else
					{
						this._NoticeCategory_NoticeCategoryID = default(int);
					}
					this.SendPropertyChanged("NoticeCategories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notices_NoticeCategoryNotices", Storage="_Notices", ThisKey="Notice_NoticeID", OtherKey="NoticeID", IsForeignKey=true)]
		public Notices Notices
		{
			get
			{
				return this._Notices.Entity;
			}
			set
			{
				Notices previousValue = this._Notices.Entity;
				if (((previousValue != value) 
							|| (this._Notices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notices.Entity = null;
						previousValue.NoticeCategoryNotices.Remove(this);
					}
					this._Notices.Entity = value;
					if ((value != null))
					{
						value.NoticeCategoryNotices.Add(this);
						this._Notice_NoticeID = value.NoticeID;
					}
					else
					{
						this._Notice_NoticeID = default(int);
					}
					this.SendPropertyChanged("Notices");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeComments")]
	public partial class NoticeComments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoticeCommentID;
		
		private int _NoticeFK;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _PublishDate;
		
		private EntityRef<Notices> _Notices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoticeCommentIDChanging(int value);
    partial void OnNoticeCommentIDChanged();
    partial void OnNoticeFKChanging(int value);
    partial void OnNoticeFKChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishDateChanging(System.DateTime value);
    partial void OnPublishDateChanged();
    #endregion
		
		public NoticeComments()
		{
			this._Notices = default(EntityRef<Notices>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeCommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoticeCommentID
		{
			get
			{
				return this._NoticeCommentID;
			}
			set
			{
				if ((this._NoticeCommentID != value))
				{
					this.OnNoticeCommentIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeCommentID = value;
					this.SendPropertyChanged("NoticeCommentID");
					this.OnNoticeCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeFK", DbType="Int NOT NULL")]
		public int NoticeFK
		{
			get
			{
				return this._NoticeFK;
			}
			set
			{
				if ((this._NoticeFK != value))
				{
					if (this._Notices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoticeFKChanging(value);
					this.SendPropertyChanging();
					this._NoticeFK = value;
					this.SendPropertyChanged("NoticeFK");
					this.OnNoticeFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="DateTime NOT NULL")]
		public System.DateTime PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notices_NoticeComments", Storage="_Notices", ThisKey="NoticeFK", OtherKey="NoticeID", IsForeignKey=true)]
		public Notices Notices
		{
			get
			{
				return this._Notices.Entity;
			}
			set
			{
				Notices previousValue = this._Notices.Entity;
				if (((previousValue != value) 
							|| (this._Notices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notices.Entity = null;
						previousValue.NoticeComments.Remove(this);
					}
					this._Notices.Entity = value;
					if ((value != null))
					{
						value.NoticeComments.Add(this);
						this._NoticeFK = value.NoticeID;
					}
					else
					{
						this._NoticeFK = default(int);
					}
					this.SendPropertyChanged("Notices");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeDetails")]
	public partial class NoticeDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoticeDetailID;
		
		private int _NoticeFK;
		
		private string _Title;
		
		private string _Content;
		
		private System.DateTime _PublishDate;
		
		private EntityRef<Notices> _Notices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoticeDetailIDChanging(int value);
    partial void OnNoticeDetailIDChanged();
    partial void OnNoticeFKChanging(int value);
    partial void OnNoticeFKChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPublishDateChanging(System.DateTime value);
    partial void OnPublishDateChanged();
    #endregion
		
		public NoticeDetails()
		{
			this._Notices = default(EntityRef<Notices>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoticeDetailID
		{
			get
			{
				return this._NoticeDetailID;
			}
			set
			{
				if ((this._NoticeDetailID != value))
				{
					this.OnNoticeDetailIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeDetailID = value;
					this.SendPropertyChanged("NoticeDetailID");
					this.OnNoticeDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeFK", DbType="Int NOT NULL")]
		public int NoticeFK
		{
			get
			{
				return this._NoticeFK;
			}
			set
			{
				if ((this._NoticeFK != value))
				{
					if (this._Notices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoticeFKChanging(value);
					this.SendPropertyChanging();
					this._NoticeFK = value;
					this.SendPropertyChanged("NoticeFK");
					this.OnNoticeFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="DateTime NOT NULL")]
		public System.DateTime PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notices_NoticeDetails", Storage="_Notices", ThisKey="NoticeFK", OtherKey="NoticeID", IsForeignKey=true)]
		public Notices Notices
		{
			get
			{
				return this._Notices.Entity;
			}
			set
			{
				Notices previousValue = this._Notices.Entity;
				if (((previousValue != value) 
							|| (this._Notices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Notices.Entity = null;
						previousValue.NoticeDetails.Remove(this);
					}
					this._Notices.Entity = value;
					if ((value != null))
					{
						value.NoticeDetails.Add(this);
						this._NoticeFK = value.NoticeID;
					}
					else
					{
						this._NoticeFK = default(int);
					}
					this.SendPropertyChanged("Notices");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notices")]
	public partial class Notices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoticeID;
		
		private int _UserFK;
		
		private string _Title;
		
		private string _ShortContent;
		
		private System.DateTime _PublishDate;
		
		private EntitySet<NoticeCategoryNotices> _NoticeCategoryNotices;
		
		private EntitySet<NoticeComments> _NoticeComments;
		
		private EntitySet<NoticeDetails> _NoticeDetails;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoticeIDChanging(int value);
    partial void OnNoticeIDChanged();
    partial void OnUserFKChanging(int value);
    partial void OnUserFKChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnShortContentChanging(string value);
    partial void OnShortContentChanged();
    partial void OnPublishDateChanging(System.DateTime value);
    partial void OnPublishDateChanged();
    #endregion
		
		public Notices()
		{
			this._NoticeCategoryNotices = new EntitySet<NoticeCategoryNotices>(new Action<NoticeCategoryNotices>(this.attach_NoticeCategoryNotices), new Action<NoticeCategoryNotices>(this.detach_NoticeCategoryNotices));
			this._NoticeComments = new EntitySet<NoticeComments>(new Action<NoticeComments>(this.attach_NoticeComments), new Action<NoticeComments>(this.detach_NoticeComments));
			this._NoticeDetails = new EntitySet<NoticeDetails>(new Action<NoticeDetails>(this.attach_NoticeDetails), new Action<NoticeDetails>(this.detach_NoticeDetails));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoticeID
		{
			get
			{
				return this._NoticeID;
			}
			set
			{
				if ((this._NoticeID != value))
				{
					this.OnNoticeIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeID = value;
					this.SendPropertyChanged("NoticeID");
					this.OnNoticeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFK", DbType="Int NOT NULL")]
		public int UserFK
		{
			get
			{
				return this._UserFK;
			}
			set
			{
				if ((this._UserFK != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserFKChanging(value);
					this.SendPropertyChanging();
					this._UserFK = value;
					this.SendPropertyChanged("UserFK");
					this.OnUserFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ShortContent
		{
			get
			{
				return this._ShortContent;
			}
			set
			{
				if ((this._ShortContent != value))
				{
					this.OnShortContentChanging(value);
					this.SendPropertyChanging();
					this._ShortContent = value;
					this.SendPropertyChanged("ShortContent");
					this.OnShortContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublishDate", DbType="DateTime NOT NULL")]
		public System.DateTime PublishDate
		{
			get
			{
				return this._PublishDate;
			}
			set
			{
				if ((this._PublishDate != value))
				{
					this.OnPublishDateChanging(value);
					this.SendPropertyChanging();
					this._PublishDate = value;
					this.SendPropertyChanged("PublishDate");
					this.OnPublishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notices_NoticeCategoryNotices", Storage="_NoticeCategoryNotices", ThisKey="NoticeID", OtherKey="Notice_NoticeID")]
		public EntitySet<NoticeCategoryNotices> NoticeCategoryNotices
		{
			get
			{
				return this._NoticeCategoryNotices;
			}
			set
			{
				this._NoticeCategoryNotices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notices_NoticeComments", Storage="_NoticeComments", ThisKey="NoticeID", OtherKey="NoticeFK")]
		public EntitySet<NoticeComments> NoticeComments
		{
			get
			{
				return this._NoticeComments;
			}
			set
			{
				this._NoticeComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Notices_NoticeDetails", Storage="_NoticeDetails", ThisKey="NoticeID", OtherKey="NoticeFK")]
		public EntitySet<NoticeDetails> NoticeDetails
		{
			get
			{
				return this._NoticeDetails;
			}
			set
			{
				this._NoticeDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Notices", Storage="_Users", ThisKey="UserFK", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._UserFK = value.UserID;
					}
					else
					{
						this._UserFK = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NoticeCategoryNotices(NoticeCategoryNotices entity)
		{
			this.SendPropertyChanging();
			entity.Notices = this;
		}
		
		private void detach_NoticeCategoryNotices(NoticeCategoryNotices entity)
		{
			this.SendPropertyChanging();
			entity.Notices = null;
		}
		
		private void attach_NoticeComments(NoticeComments entity)
		{
			this.SendPropertyChanging();
			entity.Notices = this;
		}
		
		private void detach_NoticeComments(NoticeComments entity)
		{
			this.SendPropertyChanging();
			entity.Notices = null;
		}
		
		private void attach_NoticeDetails(NoticeDetails entity)
		{
			this.SendPropertyChanging();
			entity.Notices = this;
		}
		
		private void detach_NoticeDetails(NoticeDetails entity)
		{
			this.SendPropertyChanging();
			entity.Notices = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private string _Name;
		
		private int _ProductFK;
		
		private int _UserFK;
		
		private System.DateTime _OrderDate;
		
		private EntityRef<Products> _Products;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProductFKChanging(int value);
    partial void OnProductFKChanged();
    partial void OnUserFKChanging(int value);
    partial void OnUserFKChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    #endregion
		
		public Orders()
		{
			this._Products = default(EntityRef<Products>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductFK", DbType="Int NOT NULL")]
		public int ProductFK
		{
			get
			{
				return this._ProductFK;
			}
			set
			{
				if ((this._ProductFK != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductFKChanging(value);
					this.SendPropertyChanging();
					this._ProductFK = value;
					this.SendPropertyChanged("ProductFK");
					this.OnProductFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFK", DbType="Int NOT NULL")]
		public int UserFK
		{
			get
			{
				return this._UserFK;
			}
			set
			{
				if ((this._UserFK != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserFKChanging(value);
					this.SendPropertyChanging();
					this._UserFK = value;
					this.SendPropertyChanged("UserFK");
					this.OnUserFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Orders", Storage="_Products", ThisKey="ProductFK", OtherKey="ProductID", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ProductFK = value.ProductID;
					}
					else
					{
						this._ProductFK = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Orders", Storage="_Users", ThisKey="UserFK", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._UserFK = value.UserID;
					}
					else
					{
						this._UserFK = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategories")]
	public partial class ProductCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCategoryID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ProductCategoryProducts> _ProductCategoryProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCategoryIDChanging(int value);
    partial void OnProductCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ProductCategories()
		{
			this._ProductCategoryProducts = new EntitySet<ProductCategoryProducts>(new Action<ProductCategoryProducts>(this.attach_ProductCategoryProducts), new Action<ProductCategoryProducts>(this.detach_ProductCategoryProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductCategoryID
		{
			get
			{
				return this._ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategoryID != value))
				{
					this.OnProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategoryID");
					this.OnProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategories_ProductCategoryProducts", Storage="_ProductCategoryProducts", ThisKey="ProductCategoryID", OtherKey="ProductCategory_ProductCategoryID")]
		public EntitySet<ProductCategoryProducts> ProductCategoryProducts
		{
			get
			{
				return this._ProductCategoryProducts;
			}
			set
			{
				this._ProductCategoryProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductCategoryProducts(ProductCategoryProducts entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategories = this;
		}
		
		private void detach_ProductCategoryProducts(ProductCategoryProducts entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategoryProducts")]
	public partial class ProductCategoryProducts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCategory_ProductCategoryID;
		
		private int _Product_ProductID;
		
		private EntityRef<ProductCategories> _ProductCategories;
		
		private EntityRef<Products> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCategory_ProductCategoryIDChanging(int value);
    partial void OnProductCategory_ProductCategoryIDChanged();
    partial void OnProduct_ProductIDChanging(int value);
    partial void OnProduct_ProductIDChanged();
    #endregion
		
		public ProductCategoryProducts()
		{
			this._ProductCategories = default(EntityRef<ProductCategories>);
			this._Products = default(EntityRef<Products>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategory_ProductCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductCategory_ProductCategoryID
		{
			get
			{
				return this._ProductCategory_ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategory_ProductCategoryID != value))
				{
					if (this._ProductCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductCategory_ProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategory_ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategory_ProductCategoryID");
					this.OnProductCategory_ProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Product_ProductID
		{
			get
			{
				return this._Product_ProductID;
			}
			set
			{
				if ((this._Product_ProductID != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_ProductIDChanging(value);
					this.SendPropertyChanging();
					this._Product_ProductID = value;
					this.SendPropertyChanged("Product_ProductID");
					this.OnProduct_ProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategories_ProductCategoryProducts", Storage="_ProductCategories", ThisKey="ProductCategory_ProductCategoryID", OtherKey="ProductCategoryID", IsForeignKey=true)]
		public ProductCategories ProductCategories
		{
			get
			{
				return this._ProductCategories.Entity;
			}
			set
			{
				ProductCategories previousValue = this._ProductCategories.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategories.Entity = null;
						previousValue.ProductCategoryProducts.Remove(this);
					}
					this._ProductCategories.Entity = value;
					if ((value != null))
					{
						value.ProductCategoryProducts.Add(this);
						this._ProductCategory_ProductCategoryID = value.ProductCategoryID;
					}
					else
					{
						this._ProductCategory_ProductCategoryID = default(int);
					}
					this.SendPropertyChanged("ProductCategories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_ProductCategoryProducts", Storage="_Products", ThisKey="Product_ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.ProductCategoryProducts.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.ProductCategoryProducts.Add(this);
						this._Product_ProductID = value.ProductID;
					}
					else
					{
						this._Product_ProductID = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _EntryDate;
		
		private EntitySet<Orders> _Orders;
		
		private EntitySet<ProductCategoryProducts> _ProductCategoryProducts;
		
		private EntitySet<Shipments> _Shipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    #endregion
		
		public Products()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._ProductCategoryProducts = new EntitySet<ProductCategoryProducts>(new Action<ProductCategoryProducts>(this.attach_ProductCategoryProducts), new Action<ProductCategoryProducts>(this.detach_ProductCategoryProducts));
			this._Shipments = new EntitySet<Shipments>(new Action<Shipments>(this.attach_Shipments), new Action<Shipments>(this.detach_Shipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Orders", Storage="_Orders", ThisKey="ProductID", OtherKey="ProductFK")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_ProductCategoryProducts", Storage="_ProductCategoryProducts", ThisKey="ProductID", OtherKey="Product_ProductID")]
		public EntitySet<ProductCategoryProducts> ProductCategoryProducts
		{
			get
			{
				return this._ProductCategoryProducts;
			}
			set
			{
				this._ProductCategoryProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Shipments", Storage="_Shipments", ThisKey="ProductID", OtherKey="ProductFK")]
		public EntitySet<Shipments> Shipments
		{
			get
			{
				return this._Shipments;
			}
			set
			{
				this._Shipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
		
		private void attach_ProductCategoryProducts(ProductCategoryProducts entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_ProductCategoryProducts(ProductCategoryProducts entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
		
		private void attach_Shipments(Shipments entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_Shipments(Shipments entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Roles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<RoleUsers> _RoleUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Roles()
		{
			this._RoleUsers = new EntitySet<RoleUsers>(new Action<RoleUsers>(this.attach_RoleUsers), new Action<RoleUsers>(this.detach_RoleUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_RoleUsers", Storage="_RoleUsers", ThisKey="RoleID", OtherKey="Role_RoleID")]
		public EntitySet<RoleUsers> RoleUsers
		{
			get
			{
				return this._RoleUsers;
			}
			set
			{
				this._RoleUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleUsers(RoleUsers entity)
		{
			this.SendPropertyChanging();
			entity.Roles = this;
		}
		
		private void detach_RoleUsers(RoleUsers entity)
		{
			this.SendPropertyChanging();
			entity.Roles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleUsers")]
	public partial class RoleUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_RoleID;
		
		private int _User_UserID;
		
		private EntityRef<Roles> _Roles;
		
		private EntityRef<Users> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_RoleIDChanging(int value);
    partial void OnRole_RoleIDChanged();
    partial void OnUser_UserIDChanging(int value);
    partial void OnUser_UserIDChanged();
    #endregion
		
		public RoleUsers()
		{
			this._Roles = default(EntityRef<Roles>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_RoleID
		{
			get
			{
				return this._Role_RoleID;
			}
			set
			{
				if ((this._Role_RoleID != value))
				{
					if (this._Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_RoleIDChanging(value);
					this.SendPropertyChanging();
					this._Role_RoleID = value;
					this.SendPropertyChanged("Role_RoleID");
					this.OnRole_RoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int User_UserID
		{
			get
			{
				return this._User_UserID;
			}
			set
			{
				if ((this._User_UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_UserIDChanging(value);
					this.SendPropertyChanging();
					this._User_UserID = value;
					this.SendPropertyChanged("User_UserID");
					this.OnUser_UserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_RoleUsers", Storage="_Roles", ThisKey="Role_RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Roles Roles
		{
			get
			{
				return this._Roles.Entity;
			}
			set
			{
				Roles previousValue = this._Roles.Entity;
				if (((previousValue != value) 
							|| (this._Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roles.Entity = null;
						previousValue.RoleUsers.Remove(this);
					}
					this._Roles.Entity = value;
					if ((value != null))
					{
						value.RoleUsers.Add(this);
						this._Role_RoleID = value.RoleID;
					}
					else
					{
						this._Role_RoleID = default(int);
					}
					this.SendPropertyChanged("Roles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_RoleUsers", Storage="_Users", ThisKey="User_UserID", OtherKey="UserID", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.RoleUsers.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.RoleUsers.Add(this);
						this._User_UserID = value.UserID;
					}
					else
					{
						this._User_UserID = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shipments")]
	public partial class Shipments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShipmentID;
		
		private string _Name;
		
		private int _ProductFK;
		
		private string _Description;
		
		private System.DateTime _EstimatedDeliveryDate;
		
		private EntityRef<Products> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipmentIDChanging(int value);
    partial void OnShipmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProductFKChanging(int value);
    partial void OnProductFKChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEstimatedDeliveryDateChanging(System.DateTime value);
    partial void OnEstimatedDeliveryDateChanged();
    #endregion
		
		public Shipments()
		{
			this._Products = default(EntityRef<Products>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShipmentID
		{
			get
			{
				return this._ShipmentID;
			}
			set
			{
				if ((this._ShipmentID != value))
				{
					this.OnShipmentIDChanging(value);
					this.SendPropertyChanging();
					this._ShipmentID = value;
					this.SendPropertyChanged("ShipmentID");
					this.OnShipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductFK", DbType="Int NOT NULL")]
		public int ProductFK
		{
			get
			{
				return this._ProductFK;
			}
			set
			{
				if ((this._ProductFK != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductFKChanging(value);
					this.SendPropertyChanging();
					this._ProductFK = value;
					this.SendPropertyChanged("ProductFK");
					this.OnProductFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedDeliveryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EstimatedDeliveryDate
		{
			get
			{
				return this._EstimatedDeliveryDate;
			}
			set
			{
				if ((this._EstimatedDeliveryDate != value))
				{
					this.OnEstimatedDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._EstimatedDeliveryDate = value;
					this.SendPropertyChanged("EstimatedDeliveryDate");
					this.OnEstimatedDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Shipments", Storage="_Products", ThisKey="ProductFK", OtherKey="ProductID", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.Shipments.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.Shipments.Add(this);
						this._ProductFK = value.ProductID;
					}
					else
					{
						this._ProductFK = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Name;
		
		private System.DateTime _RegistrationDate;
		
		private string _NIF;
		
		private EntitySet<Notices> _Notices;
		
		private EntitySet<Orders> _Orders;
		
		private EntitySet<RoleUsers> _RoleUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnNIFChanging(string value);
    partial void OnNIFChanged();
    #endregion
		
		public Users()
		{
			this._Notices = new EntitySet<Notices>(new Action<Notices>(this.attach_Notices), new Action<Notices>(this.detach_Notices));
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._RoleUsers = new EntitySet<RoleUsers>(new Action<RoleUsers>(this.attach_RoleUsers), new Action<RoleUsers>(this.detach_RoleUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._RegistrationDate;
			}
			set
			{
				if ((this._RegistrationDate != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationDate = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIF", DbType="NVarChar(9) NOT NULL", CanBeNull=false)]
		public string NIF
		{
			get
			{
				return this._NIF;
			}
			set
			{
				if ((this._NIF != value))
				{
					this.OnNIFChanging(value);
					this.SendPropertyChanging();
					this._NIF = value;
					this.SendPropertyChanged("NIF");
					this.OnNIFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Notices", Storage="_Notices", ThisKey="UserID", OtherKey="UserFK")]
		public EntitySet<Notices> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Orders", Storage="_Orders", ThisKey="UserID", OtherKey="UserFK")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_RoleUsers", Storage="_RoleUsers", ThisKey="UserID", OtherKey="User_UserID")]
		public EntitySet<RoleUsers> RoleUsers
		{
			get
			{
				return this._RoleUsers;
			}
			set
			{
				this._RoleUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notices(Notices entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Notices(Notices entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_RoleUsers(RoleUsers entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_RoleUsers(RoleUsers entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
